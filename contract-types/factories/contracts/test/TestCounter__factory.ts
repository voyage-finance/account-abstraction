/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type {
  TestCounter,
  TestCounterInterface,
} from "../../../contracts/test/TestCounter";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "sender",
        type: "address",
      },
    ],
    name: "CalledFrom",
    type: "event",
  },
  {
    inputs: [],
    name: "count",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "counters",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "repeat",
        type: "uint256",
      },
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    name: "gasWaster",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "justemit",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "offset",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "xxx",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b5061048f806100206000396000f3fe608060405234801561001057600080fd5b50600436106100725760003560e01c8063a5e9585f11610050578063a5e9585f1461009c578063be65ab8c146100ce578063d5556544146100ee57600080fd5b806306661abd14610077578063278ddd3c14610081578063a1b4689014610089575b600080fd5b61007f6100f7565b005b61007f610162565b61007f610097366004610295565b610197565b6100bc6100aa366004610311565b60016020526000908152604090205481565b60405190815260200160405180910390f35b6100bc6100dc36600461032a565b60006020819052908152604090205481565b6100bc60025481565b6101356040518060400160405280601181526020017f54657374436f756e7465722e636f756e740000000000000000000000000000008152506101e2565b33600090815260208190526040902054610150906001610396565b33600090815260208190526040902055565b6040513381527ffb3b4d6258432a9a3d78dd9bffbcb6cfb1bd94f58da35fd530d08da7d1d058329060200160405180910390a1565b60015b8381116101dc57600280549060006101b1836103ae565b90915550506002546000908152600160205260409020819055806101d4816103ae565b91505061019a565b50505050565b610271816040516024016101f691906103e6565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f41304fac00000000000000000000000000000000000000000000000000000000179052610274565b50565b80516a636f6e736f6c652e6c6f67602083016000808483855afa5050505050565b6000806000604084860312156102aa57600080fd5b83359250602084013567ffffffffffffffff808211156102c957600080fd5b818601915086601f8301126102dd57600080fd5b8135818111156102ec57600080fd5b8760208285010111156102fe57600080fd5b6020830194508093505050509250925092565b60006020828403121561032357600080fd5b5035919050565b60006020828403121561033c57600080fd5b813573ffffffffffffffffffffffffffffffffffffffff8116811461036057600080fd5b9392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600082198211156103a9576103a9610367565b500190565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82036103df576103df610367565b5060010190565b600060208083528351808285015260005b81811015610413578581018301518582016040015282016103f7565b81811115610425576000604083870101525b50601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01692909201604001939250505056fea2646970667358221220712c3c17032cf29f3bf70660433f58c7436526b2301ed38535638c56e7b7897464736f6c634300080f0033";

type TestCounterConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: TestCounterConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class TestCounter__factory extends ContractFactory {
  constructor(...args: TestCounterConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<TestCounter> {
    return super.deploy(overrides || {}) as Promise<TestCounter>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): TestCounter {
    return super.attach(address) as TestCounter;
  }
  override connect(signer: Signer): TestCounter__factory {
    return super.connect(signer) as TestCounter__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): TestCounterInterface {
    return new utils.Interface(_abi) as TestCounterInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): TestCounter {
    return new Contract(address, _abi, signerOrProvider) as TestCounter;
  }
}
