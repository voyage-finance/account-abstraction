/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type {
  BLSSignatureAggregator,
  BLSSignatureAggregatorInterface,
} from "../../../contracts/bls/BLSSignatureAggregator";

const _abi = [
  {
    inputs: [],
    name: "BLS_DOMAIN",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "N",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "contract IEntryPoint",
        name: "entryPoint",
        type: "address",
      },
      {
        internalType: "uint32",
        name: "delay",
        type: "uint32",
      },
    ],
    name: "addStake",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "address",
            name: "sender",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "nonce",
            type: "uint256",
          },
          {
            internalType: "bytes",
            name: "initCode",
            type: "bytes",
          },
          {
            internalType: "bytes",
            name: "callData",
            type: "bytes",
          },
          {
            internalType: "uint256",
            name: "callGasLimit",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "verificationGasLimit",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "preVerificationGas",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "maxFeePerGas",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "maxPriorityFeePerGas",
            type: "uint256",
          },
          {
            internalType: "bytes",
            name: "paymasterAndData",
            type: "bytes",
          },
          {
            internalType: "bytes",
            name: "signature",
            type: "bytes",
          },
        ],
        internalType: "struct UserOperation[]",
        name: "userOps",
        type: "tuple[]",
      },
    ],
    name: "aggregateSignatures",
    outputs: [
      {
        internalType: "bytes",
        name: "aggregatesSignature",
        type: "bytes",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes",
        name: "data",
        type: "bytes",
      },
    ],
    name: "getTrailingPublicKey",
    outputs: [
      {
        internalType: "uint256[4]",
        name: "publicKey",
        type: "uint256[4]",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "address",
            name: "sender",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "nonce",
            type: "uint256",
          },
          {
            internalType: "bytes",
            name: "initCode",
            type: "bytes",
          },
          {
            internalType: "bytes",
            name: "callData",
            type: "bytes",
          },
          {
            internalType: "uint256",
            name: "callGasLimit",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "verificationGasLimit",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "preVerificationGas",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "maxFeePerGas",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "maxPriorityFeePerGas",
            type: "uint256",
          },
          {
            internalType: "bytes",
            name: "paymasterAndData",
            type: "bytes",
          },
          {
            internalType: "bytes",
            name: "signature",
            type: "bytes",
          },
        ],
        internalType: "struct UserOperation",
        name: "userOp",
        type: "tuple",
      },
    ],
    name: "getUserOpHash",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "address",
            name: "sender",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "nonce",
            type: "uint256",
          },
          {
            internalType: "bytes",
            name: "initCode",
            type: "bytes",
          },
          {
            internalType: "bytes",
            name: "callData",
            type: "bytes",
          },
          {
            internalType: "uint256",
            name: "callGasLimit",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "verificationGasLimit",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "preVerificationGas",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "maxFeePerGas",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "maxPriorityFeePerGas",
            type: "uint256",
          },
          {
            internalType: "bytes",
            name: "paymasterAndData",
            type: "bytes",
          },
          {
            internalType: "bytes",
            name: "signature",
            type: "bytes",
          },
        ],
        internalType: "struct UserOperation",
        name: "userOp",
        type: "tuple",
      },
    ],
    name: "getUserOpPublicKey",
    outputs: [
      {
        internalType: "uint256[4]",
        name: "publicKey",
        type: "uint256[4]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "address",
            name: "sender",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "nonce",
            type: "uint256",
          },
          {
            internalType: "bytes",
            name: "initCode",
            type: "bytes",
          },
          {
            internalType: "bytes",
            name: "callData",
            type: "bytes",
          },
          {
            internalType: "uint256",
            name: "callGasLimit",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "verificationGasLimit",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "preVerificationGas",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "maxFeePerGas",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "maxPriorityFeePerGas",
            type: "uint256",
          },
          {
            internalType: "bytes",
            name: "paymasterAndData",
            type: "bytes",
          },
          {
            internalType: "bytes",
            name: "signature",
            type: "bytes",
          },
        ],
        internalType: "struct UserOperation",
        name: "userOp",
        type: "tuple",
      },
    ],
    name: "userOpToMessage",
    outputs: [
      {
        internalType: "uint256[2]",
        name: "",
        type: "uint256[2]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "address",
            name: "sender",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "nonce",
            type: "uint256",
          },
          {
            internalType: "bytes",
            name: "initCode",
            type: "bytes",
          },
          {
            internalType: "bytes",
            name: "callData",
            type: "bytes",
          },
          {
            internalType: "uint256",
            name: "callGasLimit",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "verificationGasLimit",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "preVerificationGas",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "maxFeePerGas",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "maxPriorityFeePerGas",
            type: "uint256",
          },
          {
            internalType: "bytes",
            name: "paymasterAndData",
            type: "bytes",
          },
          {
            internalType: "bytes",
            name: "signature",
            type: "bytes",
          },
        ],
        internalType: "struct UserOperation[]",
        name: "userOps",
        type: "tuple[]",
      },
      {
        internalType: "bytes",
        name: "signature",
        type: "bytes",
      },
    ],
    name: "validateSignatures",
    outputs: [],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "address",
            name: "sender",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "nonce",
            type: "uint256",
          },
          {
            internalType: "bytes",
            name: "initCode",
            type: "bytes",
          },
          {
            internalType: "bytes",
            name: "callData",
            type: "bytes",
          },
          {
            internalType: "uint256",
            name: "callGasLimit",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "verificationGasLimit",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "preVerificationGas",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "maxFeePerGas",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "maxPriorityFeePerGas",
            type: "uint256",
          },
          {
            internalType: "bytes",
            name: "paymasterAndData",
            type: "bytes",
          },
          {
            internalType: "bytes",
            name: "signature",
            type: "bytes",
          },
        ],
        internalType: "struct UserOperation",
        name: "userOp",
        type: "tuple",
      },
    ],
    name: "validateUserOpSignature",
    outputs: [
      {
        internalType: "bytes",
        name: "sigForUserOp",
        type: "bytes",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b50611cf1806100206000396000f3fe6080604052600436106100b05760003560e01c806364c530cd11610069578063b7620eb41161004e578063b7620eb4146101d8578063c9e525df146101f8578063e3563a4f1461022c57600080fd5b806364c530cd14610198578063a6193531146101b857600080fd5b8063408644311161009a5780634086443114610129578063451711591461015657806357f09b721461016b57600080fd5b80629d9250146100b5578063275e2d79146100fc575b600080fd5b3480156100c157600080fd5b506100e97fd84c4373167c517e9ccd66803f86d8a4f49e7e1315a7a73b516affea7428f82b81565b6040519081526020015b60405180910390f35b34801561010857600080fd5b5061011c610117366004611318565b61024c565b6040516100f391906113c5565b34801561013557600080fd5b50610149610144366004611642565b6103b4565b6040516100f39190611677565b6101696101643660046116a8565b6103da565b005b34801561017757600080fd5b5061018b610186366004611642565b610465565b6040516100f391906116ea565b3480156101a457600080fd5b5061011c6101b3366004611712565b610502565b3480156101c457600080fd5b506100e96101d3366004611642565b61065c565b3480156101e457600080fd5b5061018b6101f336600461174e565b610674565b34801561020457600080fd5b506100e97f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd4781565b34801561023857600080fd5b50610169610247366004611783565b61076c565b606060008267ffffffffffffffff811115610269576102696113d8565b6040519080825280602002602001820160405280156102ae57816020015b60408051808201909152600080825260208201528152602001906001900390816102875790505b50905060005b815181101561034b576000808686848181106102d2576102d261181a565b90506020028101906102e49190611849565b6102f390610140810190611887565b81019061030091906118ec565b9150915060405180604001604052808381526020018281525084848151811061032b5761032b61181a565b6020026020010181905250505080806103439061193d565b9150506102b4565b506000610378827f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47610aeb565b805160208083015160405193945061039b93909101918252602082015260400190565b6040516020818303038152906040529250505092915050565b6103bc611290565b60006103c783610bd6565b90506103d38382610c0e565b9392505050565b6040517f0396cb6000000000000000000000000000000000000000000000000000000000815263ffffffff8216600482015273ffffffffffffffffffffffffffffffffffffffff831690630396cb609034906024016000604051808303818588803b15801561044857600080fd5b505af115801561045c573d6000803e3d6000fd5b50505050505050565b61046d6112ae565b60408201518051156104895761048281610674565b91506104fc565b826000015173ffffffffffffffffffffffffffffffffffffffff1663e02afbae6040518163ffffffff1660e01b8152600401608060405180830381865afa1580156104d8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103d39190611975565b50919050565b60606000610514610140840184611887565b81019061052191906119e8565b9050600061053161018685611a48565b9050600061054161014486611a48565b6040517febbdac9100000000000000000000000000000000000000000000000000000000815290915073__$ef9c3d7698af39cc39524484516bc81727$__9063ebbdac919061059890869086908690600401611aa6565b602060405180830381865af41580156105b5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105d99190611acf565b610644576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600e60248201527f424c533a2077726f6e672073696700000000000000000000000000000000000060448201526064015b60405180910390fd5b50506040805160208101909152600081529392505050565b60008061066883610bd6565b90506103d38382610ce6565b61067c6112ae565b8151608081116106e8576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601560248201527f6461746120746f2073686f727420666f72207369670000000000000000000000604482015260640161063b565b9091017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffa081015182527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc081015160208301527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0810151604083015251606082015290565b604081146107d6576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f424c533a20696e76616c6964207369676e617475726500000000000000000000604482015260640161063b565b60006107e4828401846119e8565b90508360008167ffffffffffffffff811115610802576108026113d8565b60405190808252806020026020018201604052801561083b57816020015b6108286112ae565b8152602001906001900390816108205790505b50905060008267ffffffffffffffff811115610859576108596113d8565b60405190808252806020026020018201604052801561089257816020015b61087f611290565b8152602001906001900390816108775790505b50905060005b838110156109e55760008989838181106108b4576108b461181a565b90506020028101906108c69190611849565b6108cf90611a48565b90506000816000015190508073ffffffffffffffffffffffffffffffffffffffff1663e02afbae6175306040518263ffffffff1660e01b81526004016080604051808303818786fa158015610928573d6000803e3d6000fd5b50505050506040513d601f19601f8201168201806040525081019061094d9190611975565b85848151811061095f5761095f61181a565b60200260200101819052506109b3828685815181106109805761098061181a565b602002602001015160405160200161099891906116ea565b60405160208183030381529060405280519060200120610c0e565b8484815181106109c5576109c561181a565b6020026020010181905250505080806109dd9061193d565b915050610898565b506040517f9141376300000000000000000000000000000000000000000000000000000000815273__$ef9c3d7698af39cc39524484516bc81727$__90639141376390610a3a90879086908690600401611af1565b602060405180830381865af4158015610a57573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a7b9190611acf565b610ae1576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601e60248201527f424c533a2076616c69646174655369676e617475726573206661696c65640000604482015260640161063b565b5050505050505050565b6040805180820190915260008082526020820152600083600081518110610b1457610b1461181a565b6020026020010151600001519050600084600081518110610b3757610b3761181a565b602090810291909101810151015190506001805b8651811015610bb757610b9e8484848a8581518110610b6c57610b6c61181a565b6020026020010151600001518b8681518110610b8a57610b8a61181a565b60200260200101516020015160018c610d2f565b9195509350915080610baf8161193d565b915050610b4b565b50610bc48383838861107c565b90855260208501525091949350505050565b6000610be182610465565b604051602001610bf191906116ea565b604051602081830303815290604052805190602001209050919050565b610c16611290565b6000610c228484610ce6565b905073__$ef9c3d7698af39cc39524484516bc81727$__63a850a9097fd84c4373167c517e9ccd66803f86d8a4f49e7e1315a7a73b516affea7428f82b83604051602001610c7291815260200190565b6040516020818303038152906040526040518363ffffffff1660e01b8152600401610c9e929190611b8f565b6040805180830381865af4158015610cba573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cde9190611ba8565b949350505050565b6000610cf1836110eb565b604080516020810192909252810183905230606082015246608082015260a00160405160208183030381529060405280519060200120905092915050565b6000808089158015610d3f575088155b15610d5157508591508490508361106f565b86158015610d5d575085155b15610d6f57508891508790508661106f565b610d776112ae565b8480610d8557610d85611bfd565b898a0981528480610d9857610d98611bfd565b81518a0960208201528480610daf57610daf611bfd565b86870960408201528480610dc557610dc5611bfd565b6040820151870960608201526040805160808101909152808680610deb57610deb611bfd565b60408401518e0981526020018680610e0557610e05611bfd565b60608401518d0981526020018680610e1f57610e1f611bfd565b83518b0981526020018680610e3657610e36611bfd565b60208401518a09905260408101518151919250141580610e5e57506060810151602082015114155b610ec4576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601e60248201527f557365206a6163446f75626c652066756e6374696f6e20696e73746561640000604482015260640161063b565b610ecc6112ae565b8580610eda57610eda611bfd565b8251610ee69088611c2c565b60408401510881528580610efc57610efc611bfd565b6020830151610f0b9088611c2c565b60608401510860208201528580610f2457610f24611bfd565b8151800960408201528580610f3b57610f3b611bfd565b8151604083015109606082015260008680610f5857610f58611bfd565b6060830151610f679089611c2c565b8880610f7557610f75611bfd565b602085015180090890508680610f8d57610f8d611bfd565b8780610f9b57610f9b611bfd565b8880610fa957610fa9611bfd565b6040850151865109600209610fbe9089611c2c565b8208905060008780610fd257610fd2611bfd565b8880610fe057610fe0611bfd565b610fea848b611c2c565b8a80610ff857610ff8611bfd565b6040870151885109086020850151099050878061101757611017611bfd565b888061102557611025611bfd565b606085015160208701510961103a908a611c2c565b820890506000888061104e5761104e611bfd565b898061105c5761105c611bfd565b8b8f098551099297509095509093505050505b9750975097945050505050565b600080600061108b858561119b565b90506000848061109d5761109d611bfd565b8283099050600085806110b2576110b2611bfd565b828a099050600086806110c7576110c7611bfd565b87806110d5576110d5611bfd565b8486098a09919a91995090975050505050505050565b80516020808301516040808501518051908401206060860151805190850120608087015160a088015160c089015160e08a01516101008b01516101208c01518051908b0120975160009b610bf19b909a99910173ffffffffffffffffffffffffffffffffffffffff9a909a168a5260208a019890985260408901969096526060880194909452608087019290925260a086015260c085015260e08401526101008301526101208201526101400190565b600082158015906111ac5750818314155b80156111b757508115155b61121d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600e60248201527f496e76616c6964206e756d626572000000000000000000000000000000000000604482015260640161063b565b6000600183825b8615611285576112348783611c43565b905082868061124557611245611bfd565b878061125357611253611bfd565b8584096112609089611c2c565b86089094509250866112728183611c7e565b61127c9084611c2c565b97509150611224565b509195945050505050565b60405180604001604052806002906020820280368337509192915050565b60405180608001604052806004906020820280368337509192915050565b60008083601f8401126112de57600080fd5b50813567ffffffffffffffff8111156112f657600080fd5b6020830191508360208260051b850101111561131157600080fd5b9250929050565b6000806020838503121561132b57600080fd5b823567ffffffffffffffff81111561134257600080fd5b61134e858286016112cc565b90969095509350505050565b6000815180845260005b8181101561138057602081850181015186830182015201611364565b81811115611392576000602083870101525b50601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b6020815260006103d3602083018461135a565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b604051610160810167ffffffffffffffff8111828210171561142b5761142b6113d8565b60405290565b6040805190810167ffffffffffffffff8111828210171561142b5761142b6113d8565b73ffffffffffffffffffffffffffffffffffffffff8116811461147657600080fd5b50565b803561148481611454565b919050565b600082601f83011261149a57600080fd5b813567ffffffffffffffff808211156114b5576114b56113d8565b604051601f83017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0908116603f011681019082821181831017156114fb576114fb6113d8565b8160405283815286602085880101111561151457600080fd5b836020870160208301376000602085830101528094505050505092915050565b6000610160828403121561154757600080fd5b61154f611407565b905061155a82611479565b815260208201356020820152604082013567ffffffffffffffff8082111561158157600080fd5b61158d85838601611489565b604084015260608401359150808211156115a657600080fd5b6115b285838601611489565b60608401526080840135608084015260a084013560a084015260c084013560c084015260e084013560e0840152610100915081840135828401526101209150818401358181111561160257600080fd5b61160e86828701611489565b83850152506101409150818401358181111561162957600080fd5b61163586828701611489565b8385015250505092915050565b60006020828403121561165457600080fd5b813567ffffffffffffffff81111561166b57600080fd5b610cde84828501611534565b60408101818360005b600281101561169f578151835260209283019290910190600101611680565b50505092915050565b600080604083850312156116bb57600080fd5b82356116c681611454565b9150602083013563ffffffff811681146116df57600080fd5b809150509250929050565b60808101818360005b600481101561169f5781518352602092830192909101906001016116f3565b60006020828403121561172457600080fd5b813567ffffffffffffffff81111561173b57600080fd5b820161016081850312156103d357600080fd5b60006020828403121561176057600080fd5b813567ffffffffffffffff81111561177757600080fd5b610cde84828501611489565b6000806000806040858703121561179957600080fd5b843567ffffffffffffffff808211156117b157600080fd5b6117bd888389016112cc565b909650945060208701359150808211156117d657600080fd5b818701915087601f8301126117ea57600080fd5b8135818111156117f957600080fd5b88602082850101111561180b57600080fd5b95989497505060200194505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600082357ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffea183360301811261187d57600080fd5b9190910192915050565b60008083357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe18436030181126118bc57600080fd5b83018035915067ffffffffffffffff8211156118d757600080fd5b60200191503681900382131561131157600080fd5b600080604083850312156118ff57600080fd5b50508035926020909101359150565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff820361196e5761196e61190e565b5060010190565b60006080828403121561198757600080fd5b82601f83011261199657600080fd5b6040516080810181811067ffffffffffffffff821117156119b9576119b96113d8565b6040528060808401858111156119ce57600080fd5b845b818110156112855780518352602092830192016119d0565b6000604082840312156119fa57600080fd5b82601f830112611a0957600080fd5b611a11611431565b806040840185811115611a2357600080fd5b845b81811015611a3d578035845260209384019301611a25565b509095945050505050565b6000611a543683611534565b92915050565b8060005b6002811015611a7d578151845260209384019390910190600101611a5e565b50505050565b8060005b6004811015611a7d578151845260209384019390910190600101611a87565b6101008101611ab58286611a5a565b611ac26040830185611a83565b610cde60c0830184611a5a565b600060208284031215611ae157600080fd5b815180151581146103d357600080fd5b60006080808301611b028488611a5a565b604084810183905286519182905260209160a086019083890160005b82811015611b4157611b31848351611a83565b9286019290850190600101611b1e565b5050508581036060870152865180825290830193508287019060005b81811015611b8057611b70868451611a5a565b9483019491840191600101611b5d565b50939998505050505050505050565b828152604060208201526000610cde604083018461135a565b600060408284031215611bba57600080fd5b82601f830112611bc957600080fd5b611bd1611431565b806040840185811115611be357600080fd5b845b81811015611a3d578051845260209384019301611be5565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600082821015611c3e57611c3e61190e565b500390565b600082611c79577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b500490565b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615611cb657611cb661190e565b50029056fea26469706673582212205beaa589ec68a6b80b34d961331f75e6fee5428e19bee5247f938eb046b8dfe764736f6c634300080f0033";

type BLSSignatureAggregatorConstructorParams =
  | [
      linkLibraryAddresses: BLSSignatureAggregatorLibraryAddresses,
      signer?: Signer
    ]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: BLSSignatureAggregatorConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => {
  return (
    typeof xs[0] === "string" ||
    (Array.isArray as (arg: any) => arg is readonly any[])(xs[0]) ||
    "_isInterface" in xs[0]
  );
};

export class BLSSignatureAggregator__factory extends ContractFactory {
  constructor(...args: BLSSignatureAggregatorConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      const [linkLibraryAddresses, signer] = args;
      super(
        _abi,
        BLSSignatureAggregator__factory.linkBytecode(linkLibraryAddresses),
        signer
      );
    }
  }

  static linkBytecode(
    linkLibraryAddresses: BLSSignatureAggregatorLibraryAddresses
  ): string {
    let linkedBytecode = _bytecode;

    linkedBytecode = linkedBytecode.replace(
      new RegExp("__\\$ef9c3d7698af39cc39524484516bc81727\\$__", "g"),
      linkLibraryAddresses["contracts/bls/lib/BLSOpen.sol:BLSOpen"]
        .replace(/^0x/, "")
        .toLowerCase()
    );

    return linkedBytecode;
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<BLSSignatureAggregator> {
    return super.deploy(overrides || {}) as Promise<BLSSignatureAggregator>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): BLSSignatureAggregator {
    return super.attach(address) as BLSSignatureAggregator;
  }
  override connect(signer: Signer): BLSSignatureAggregator__factory {
    return super.connect(signer) as BLSSignatureAggregator__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): BLSSignatureAggregatorInterface {
    return new utils.Interface(_abi) as BLSSignatureAggregatorInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): BLSSignatureAggregator {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as BLSSignatureAggregator;
  }
}

export interface BLSSignatureAggregatorLibraryAddresses {
  ["contracts/bls/lib/BLSOpen.sol:BLSOpen"]: string;
}
